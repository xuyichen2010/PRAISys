classdef Interface
    methods(Static)
        % Select Scheduler Model
        function [Schedule, Date] = RepairSchedule(num, time, Max_Power, Max_Trans, Max_Comm, Power_Priority, Comm_Priority, Trans_Priority, active_power, active_comm, active_trans, Power_Set, Communication_Set, Transportation_Set)
            switch num
                case 1
                    if active_power
                        [result_pow, pow_date] = Library.RepairSchedulePriority('Power', Power_Set, Power_Priority);
                    else
                        result_pow = [];
                        pow_date = [];
                    end
                    
                    if active_trans
                        [result_trans, trans_date] = Library.RepairSchedulePriority('Transportation', Transportation_Set, Trans_Priority);
                    else
                        result_trans = [];
                        trans_date = [];
                    end
                    
                    if active_comm
                        [result_comm, comm_date] = Library.RepairSchedulePriority('Communication', Communication_Set, Comm_Priority);
                    else
                        result_comm = [];
                        comm_date = [];
                    end
                    Schedule = {result_pow, result_comm, result_trans};
                    Date = {pow_date, comm_date, trans_date};
                    
                case 2
                    if active_power
                        [result_pow, pow_date] = Library.RepairSchedulEfficiency('Power', Max_Power, time, Power_Set);
                    else
                        result_pow = [];
                        pow_date = [];
                    end
                    
                    if active_trans
                        [result_trans, trans_date] = Library.RepairSchedulEfficiency('Transportation', Max_Trans, time, Transportation_Set);
                    else
                        result_trans = [];
                        trans_date = [];
                    end
                    
                    if active_comm
                        [result_comm, comm_date] = Library.RepairSchedulEfficiency('Communication', Max_Comm, time, Communication_Set);
                    else
                        result_comm = [];
                        comm_date = [];
                    end
                    Schedule = {result_pow, result_comm, result_trans};
                    Date = {pow_date, comm_date, trans_date};
            end
        end
        
        % Select Re-Scheduler Model
        function Schedule = RepairReSchedule(num, orig_Schedule, time, Max_Power, Max_Trans, Max_Comm, Power_Set, Communication_Set, Transportation_Set)
            switch num
                case 1
                    Schedule = Library.RepairScheduleReScheduleMean(orig_Schedule, time, Max_Power, Max_Trans, Max_Comm, Power_Set, Communication_Set, Transportation_Set);   
                case 2
                    Schedule = Library.RepairScheduleReScheduleActual(orig_Schedule, time, Max_Power, Max_Trans, Max_Comm, Power_Set, Communication_Set, Transportation_Set);      
            end
        end
        
        % Interdependence Selector
        function InterdependenceFactor(Interdependence_Num, CurrentWorking_Power, CurrentWorking_Comm, CurrentWorking_Trans, Power_Set, Communication_Set, Transportation_Set)
            switch Interdependence_Num
                case 1
                    Library.InterdenpendenceFactorCalculateBasic(CurrentWorking_Power, CurrentWorking_Comm, CurrentWorking_Trans, Power_Set, Communication_Set, Transportation_Set);
            end
        end
        function [Schedule, Date] = createPreTableSep(num, time, Max_Power, Max_Trans, Max_Comm, Power_Priority, Comm_Priority, Trans_Priority, active_power, active_comm, active_trans, Power_Set, Communication_Set, Transportation_Set)
            switch num
                case 1
                    if active_power
                        [result_pow, pow_date] = Library.RepairSchedulePriority('Power', Power_Set, Power_Priority);
                    else
                        result_pow = [];
                        pow_date = [];
                    end
                    
                    if active_trans
                        [result_trans, trans_date] = Library.RepairSchedulePriority('Transportation', Transportation_Set, Trans_Priority);
                    else
                        result_trans = [];
                        trans_date = [];
                    end
                    
                    if active_comm
                        [result_comm, comm_date] = Library.RepairSchedulePriority('Communication', Communication_Set, Comm_Priority);
                    else
                        result_comm = [];
                        comm_date = [];
                    end
                    Schedule = {result_pow, result_comm, result_trans};
                    Date = {pow_date, comm_date, trans_date};
                    
                case 2
                    if active_power
                        [result_pow, pow_date] = Library.RepairSchedulEfficiency('Power', Max_Power, time, Power_Set);
                    else
                        result_pow = [];
                        pow_date = [];
                    end
                    
                    if active_trans
                        [result_trans, trans_date] = Library.RepairSchedulEfficiency('Transportation', Max_Trans, time, Transportation_Set);
                    else
                        result_trans = [];
                        trans_date = [];
                    end
                    
                    if active_comm
                        [result_comm, comm_date] = Library.RepairSchedulEfficiency('Communication', Max_Comm, time, Communication_Set);
                    else
                        result_comm = [];
                        comm_date = [];
                    end
                    Schedule = {result_pow, result_comm, result_trans};
                    Date = {pow_date, comm_date, trans_date};
            end
        end
        % Select Functionality Model and Calculate the Functionality
        function [Trans_Fun, Pow_Fun, Comm_Fun] = Functionality(Power_Func_Num, Trans_Func_Num, Comm_Func_Num, Power_Set, Communication_Set, Transportation_Set)
            Trans_Fun = -1;
            Pow_Fun = -1;
            Comm_Fun = -1;
            
            flag = 1;
            
            while flag
                change_trans = 0;
                change_pow = 0;
                change_comm = 0;
                
                switch Power_Func_Num
                    case 0
                        Pow_Fun = 0;
                    case 1
                        tmp = Library.Functionality_PowerBasic(Power_Set{1});
                        if tmp ~= Pow_Fun
                            Pow_Fun = tmp;
                            change_pow = change_pow + 1;
                        end
                end
                
                switch Trans_Func_Num
                    case 0
                        Trans_Fun = 0;
                        
                    case 1
                        tmp = Library.Functionality_TransportationBasic(Transportation_Set);
                        if tmp ~= Trans_Fun
                            Trans_Fun = tmp;
                            change_trans = change_trans + 1;
                        end
                end
                
                switch Comm_Func_Num
                    case 0
                        Comm_Fun = 0;
                    case 1
                        tmp = Library.Functionality_CommunicationBasic(Communication_Set);
                        if tmp ~= Comm_Fun
                            Comm_Fun = tmp;
                            change_comm = change_comm + 1;
                        end

                end
                
                if change_pow == 0 && change_trans == 0 && change_comm == 0
                    flag = 0;
                end
            end
        end
    end
end